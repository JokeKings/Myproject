# 字典属于一种新的数据结构，称为映射（mapping）
# 字典的作用和列表类似，都是用来储存对象的容器
# 列表的储存数据的性能很好，但是查询数据的性能差
# 在字典中每一个元素都有一个唯一的名字，通过这个唯一的名字可以快速的查找指定的元素
# 在查询元素时，字典的效率是非常快的
# 在字典中可以保存多个对象，每个对象都会有唯一的名字
# 这个唯一的名字称为键（key）
# 这个对象我们称为（value）
# 所以字典我们也叫做键值对（ket-value）结构
# 每个字典中都可以有多个键值对，而每一个键值对我们称其为一项（item）


# 字典
# 使用{}来创建字典
# 语法：{k1:v1,k2:v2,k3:v3}
d1={}#创建了一个空字典
# 使用dict（）函数来创建字典
#每个参数都是一个键值对，参数名就是键，参数名就是值（这种方式创建的字典，key都是字符串）
d1=dict(name="林黛玉",age=18,gender="女")
print(d1)
# 使用len（）函数来获取字典中键值对的个数
print("获取d1键值对的个数",len(d1))
print()
print()
print()

# 也可以将一个包含有双值子序列转换为字典
# 双值序列，序列中只有两个值，[1,2]("a",1)"ab"
# 子序列，如果序列中的元素也是序列，那么我们就称这个元素为子序列
# [(1,2),(3,5)]
s=dict([("name","牛牛"),("age","300")])
print("未使用dict函数时s=dict([(""name"",""牛牛""),(""age"",""300"")])")
print("使用dict函数将双值序列转化为字典",s,type(s))

# 创建一个保护有数据的字典
# 语法：
# {key：value，key：value}
# 字典的值可以是任意对象
# 字典的键可以是任意的不可变对象（int、str、bool、tuple...）
# 键不能重复，如果重复就会覆盖掉
d={1,2,3}
d={
"name":"孙悟空",
"age":18,
"gender":"男"
}
print(d,type(d))
print()
print()


# 需要根据键来获取值
print("根据键来获取值",d["name"],d["age"],d["gender"])

# in or not in
# in检查字典中是否包含指定的键
# not in检查字典中是否不包含指定的键
print("hello"in d)


# 获取字典里的值，根据键来获取值
# 语法：d[key]
# print(d["age"])
# 通过[]来获取值时，如果键不存在，就会抛出异常
# get(key[,default])该方法用来获取字典中的值
# 如果获取的键在字典中不存在，就会返回None
print(d.get("name"))
# 也可以指定一个默认值，来作为第二个参数，这样获取不到值时将会返回默认值
print(d.get("names","字典里面没有"))
print()
print()

# 修改字典
# 、有就改变，没有就添加
# d[key]=value
d["name"]="sunwukong"
d["address"]="花果山"
print(d)


# setdefault(key[,default])可以用来向字典中添加key-value
# 如果key已经存在于字典中，则返回key的值，不会对字典做任何操作
# 如果key不存在，则向字典中添加这个key，并设置value
resuly=d.setdefault("name","猪八戒")#这时候是不会有任何影响的
result=d.setdefault("hello","哪吒")#这时候是有影响的
print("resuly=",resuly)
print('result=',result)

# update([other])
# 将其他字典中的key-value添加到当前字典中
# 如果有重复的的key，则后面的换替换前面的
s={"s":2,"d":3}
s1={"a":6,"b":9,"c":0,"d":1}
print("未使用update函数前",s)
s.update(s1)
print("使用了update函数将其他字典中的key-value添加到当前字典中后",s)
print()
print()



# 删除键值对
# del来删除字典中的key-value
del s["a"]
print(s)
print()
print()
print()

# popitem()
# 随机删除字典中的一个键值对，一般都是删除最后一个键值对
print("未使用popitem删除前",s1)
s1.popitem()
print("使用popitem删除后",s1)
result=s1.popitem()
# 返回的值是一个元组，第一个元素是删除的key，第二个是value
print(result)
print()
print()

# pop函数
# pop(key[,default])
# 根据key删除字典中的key-value
# 会将被删除的value返回，如果删除不存在的key也会抛出异常
print("初始",s1)
s1.pop("a")
print("使用pop函数后",s1)
result=s1.pop("p","没有，你删错了")
print(result)
print("使用pop函数删除字典中没有的key",s1)


# copy()
# /使用copy来对字典进行浅复制
# 复制以后的对象和原对象是独立的，修改互不影响
# 注意，浅复制只会简单的复制对象内部的值，如果对象里面还有对象，里面的对象不会被复制
r={"a":1,'t':6,'p':0}
r1=r.copy()

d={"a":{"name":"孙悟空","age":18},"b":2,"c":3}
d2=d.copy()
d2['a']['name']="猪八戒"
print("r=",r,id(r))
print("r1=",r1,id(r1))



print("d=",d,id(d))
print("d2=",d2,id(d2))



# 字典的遍历
print(d)
print(d.keys())
print(d.values())
print(d.items())
for o in d.keys() :
    print(o,d[o])
    # value同理
for i,s in d.items() :
    print(i,"=",s)





    




















