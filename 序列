# 序列
# 列表是Python的一个对象
# 对象（object）就是内存中专门来存储
# 列表存储的数据称为元素
# 一个列表中可以存储多个元素，也可以在创建列表时，来指定列表中的元素
my_list=[]#创建了一个空列表
print(my_list,type(my_list))
y_list=[10,38,87]
print(y_list)
print(y_list[2])
# len()函数来查看列表的长度
print(len(y_list))



# 切片
# 切片指从现有列表中获取一个子列表
# 创建一个列表，一般创建列表时，变量的名字使用复数
stus=["张三","李四","王五","王麻子","张三","韩信","诸葛亮","刘备","关羽","张三","荆轲"]
# 列表的索引可以是复数
# 如果索引是负数，则代表倒数
# 语法：列表「起始，结束」
# 通过切片获取元素时，会包括起始位置的元素，不会包括结束位置的元素
# 做切片操作时，不会影响原来的列表
# 其实和结束位置的索引都可以省略不写
# 省略结束位置，则会一直截取到最后
# 全部省略的话相当于创建了一个原列表的副本
print(stus[0:2])
print(stus[0:])
print(stus[:2])

# 语法：列表「起始：结束：步长」
# 步长表示，每次获取元素的间隔，默认值是1
# 步长不能是0，可以是负数（从后往前取）
print(stus[0:3:2])
print(stus[::-1])


# 通用操作+*
iu=[1,2,3]+[4,5,6]
Ui=[1,2,3]*20
# in和not in
# in用来检查指定元素是否存在
# not in用来检查指定元素是否不在列表中
# 如果不在，返回True，否则返回False
print("19"not in iu)
# len()获取列表中元素的个数
# min()获取列表中的最小值
# max()获取列表里的最大值
arr=[1,32,43,66,35,26,67,25,85,33]
print(max(arr))
# 两个方法（method），方法和函数基本是一样，只不过方法必须通过对象.方法（）的形式调用
# xxx.print()方法实际上就是和对象关系紧密的函数
# index()获取指定元素在列表中的索引，如果获取列表中没有的元素，会抛出异常
# print(stus.index("李信"))会报错
print(stus.index("张三"))
print(stus.index("张三",2))#会输出4，从2开始遇见第一个张三
print(stus.index("张三",5,10))#在4到10之间的张三
# count()




# 序列（sequence）
# 序列是Python中最基本的一种数据结构
# 数据结构指计算机中数据存储的方式
# 序列用于保存一组有序的数据，所有的数据在序列当中都有一个唯一的位置（索引）
# 并且序列中的数据会按照添加的顺序来分配索引
# 序列的分类
  # 可变序列（序列的元素可以改变）：
            # >列表（list）
   # 不可变序列（序列中的元素不能改变）：
            # >字符串（str）
            # >元组（tuple）



# 修改列表中的元素
print("修改前",stus[0])
stus[0]="孙策"
print("修改后",stus[0])
del stus[0]
print(stus)
stus[0:2]=["牛魔王","红孩儿","二郎神"]
print(stus)
stus[0:0]=["杨玉环"]#插入元素
print(stus)
# 取步长
print(stus[::3])
# 当设置了步长时，序列中元素的个数必须和切片中的元素个数相同
stus[::3]=["杨戬","老夫子","张良","司马懿"]
print(stus)

