class People:
    country='China'
    @classmethod
    def get_country(cls):
        return cls.country
        pass
    @classmethod
    def change_country(cls,data):
        cls.country=data#修改类属性的值
        pass
    @staticmethod
    def getData():
        return People.country
        pass
    pass
print(People.getData())
# 注意一般情况下我们不会通过实例对象去访问静态方法
print(People.get_country())#通过类对象去引用
p=People()
print(p.get_country)
print('----------------------')
People.change_country('英国')
print(People.get_country())#通过类对象去引用
# 由于静态方法主要来存放逻辑性代码，本身和类以及实例对象没有交互，
# 也就是说，在静态方法中不会涉及到类中方法和属性的操作
# 数据资源够得到充分的利用

# demo  返回当前的系统时间
import time#引入第三方的时间模块
class TimeTest:
    def __init__(self,hour,min,second):
        self.hour=hour
        self.min=min
        self.second=second
    @staticmethod
    def showtime():
        return time.strftime('%H:%M:%S',time.localtime())
        pass
    pass
print(TimeTest.showtime())
